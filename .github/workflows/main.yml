name: CI de Qualidade e Testes em Python

on:
  push:
    branches: 
      - main
      - 'feature/**' # Aciona em 'feature/containerization', 'feature/outra-coisa', etc.
  pull_request:
    # Por padr√£o, PRs para QUALQUER branch rodam o Action.
    branches: [ "main" ]

jobs:
  qualidade_de_codigo:
    # 1. Este Job se concentra na qualidade e estilo do c√≥digo (Linting)
    runs-on: ubuntu-latest
    
    steps:
      - name: ‚¨áÔ∏è Checkout do Codigo
        uses: actions/checkout@v4

      - name: üêç Configurar Ambiente Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: üõ†Ô∏è Instalar Dependencias (Flask e Flake8)
        # Instalamos Flask, pytest e flake8
        run: pip install -r requirements.txt

      - name: üßπ Executar Linting (Flake8)
        # O Flake8 verifica se o codigo segue as diretrizes de estilo (PEP 8).
        # Se houver erros, este passo falha e interrompe o pipeline.
        run: |
          echo "Verificando qualidade do c√≥digo com Flake8..."
          # ignore: E501 (linha muito longa, comum em exemplos)
          flake8 . --count --exit-zero --exclude=tests/* --max-complexity=10 --max-line-length=120 --statistics

  testes_funcionais:
    # 2. Este Job se concentra na funcionalidade e logica do codigo
    runs-on: ubuntu-latest
    # Define que este Job S√ì PODE rodar se o Job de qualidade de codigo for bem-sucedido
    needs: qualidade_de_codigo 
    
    steps:
      - name: ‚¨áÔ∏è Checkout do Codigo
        uses: actions/checkout@v4
      
      - name: üêç Configurar Ambiente Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: üõ†Ô∏è Instalar Dependencias (Flask e Pytest)
        run: pip install -r requirements.txt

      - name: üß™ Executar Testes Unitarios (Pytest)
          # CONFIGURA√á√ÉO DE AMBIENTE:
          # Exporta o diret√≥rio atual do GitHub Runner (que √© a raiz do projeto)
          # para a vari√°vel PYTHONPATH. Isso permite que o Python encontre 'app.py'.
        run: |
          echo "Executando testes unit√°rios..."
          export PYTHONPATH=$PWD:$PYTHONPATH
          pytest

  build_docker_image:
      runs-on: ubuntu-latest
      # Este Job so roda se os Jobs de Testes e Qualidade passarem!
      needs: testes_funcionais 
      
      steps:
        - name: ‚¨áÔ∏è Checkout do Codigo
          uses: actions/checkout@v4
          
        - name: üê≥ Build da Imagem Docker
          # O comando docker build constroi a imagem usando o Dockerfile na raiz.
          # A flag -t da um nome e uma tag para a imagem.
          run: |
            echo "Construindo imagem docker..."
            docker build -t projeto-ci-python:latest .
            echo "Build conclu√≠do! Imagem: projeto-ci-python:latest"
